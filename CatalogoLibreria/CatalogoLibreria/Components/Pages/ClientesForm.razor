
@page "/clientes/nueva"
@page "/clientes/editar/{id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigator;
@inject IRepositorioClientes _repositorio;
<h2>@_mensaje Cliente</h2>
<EditForm Model="_cliente" FormName="frmPersona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row mb-3">
        <label for="txtNombre" class="col-2 col-form-label">Nombre</label>
           <div class="col-10">
            <InputText id="txtNombre" class="form-control" @bind-Value="_cliente.Nombre" />
            <ValidationMessage For="() => _cliente.Nombre" />
    </div>
    </div>
    <div class="row mb-3">
        <label for="txtCorreo">Correo</label>
        <div class="col-10">
        <InputText id="txtCorreo" class="form-control" @bind-Value="_cliente.Correo" />
       <ValidationMessage For="() => _cliente.Correo" />
    </div>
    </div>
    <div class="row mb-3">
        <label for="txtTelefono">Telefono</label>
          <div class="col-10">
        <InputText id="Telefono" class="form-control" @bind-Value="_cliente.Telefono" />
        <ValidationMessage For="() => _cliente.Telefono" />
    </div>
</div>
    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
</EditForm>
@code {
    [Parameter] 
    public int id { get; set; }
    private Cliente? _cliente = new();

    private string _mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        if (id >0 )
        {
            _cliente = await _repositorio.Get(id);
            _mensaje = "Editar";
        }
        else
        {
            _mensaje = "Nuevo";
        }

    }
    private async void Guardar()
    {
        if (id >0)
        {
            await _repositorio.Update( id, _cliente!);
        }
        else
        {
            await _repositorio.Add(_cliente!);
        }
        Cancelar();
    }
private void Cancelar()
{
    _navigator.NavigateTo("/clientes");
}
}